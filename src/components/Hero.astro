---
import StyledButton from './StyledButton.astro'
---

<div class="relative h-screen h-svh">
	<video
		id="video-hero"
		class="absolute h-full w-full object-cover"
		src={import.meta.env.BASE_URL + 'media/videos/hero.mp4'}
		muted
		autoplay
		loop
		playsinline></video>
	<div class="ellipse ellipse-1"></div>
	<div class="ellipse ellipse-2"></div>
	<div class="parallax h-full">
		<div class="flex h-full items-center justify-center">
			<div class="parallax__text container z-0 px-8">
				<div id="hero-to-animate" class="opacity-0">
					<h1 id="hero-to-animate2" class="">
						Cartography and Mapping<br />
						<span class="gradient"> of the Web3 Ecosystem</span>
					</h1>
					<a
						id="hero-to-animate3"
						class="blocksurvey-share"
						href="https://blocksurvey.io/quo-vadis-web3-v5-lyrR1x.wRMaKE1LU0gr_yg?v=o"
						target="_blank"
					>
						<StyledButton>Take our Web3 Survey</StyledButton>
					</a>
				</div>
			</div>
		</div>
	</div>
</div>

<style>
	h1 {
		color: white;
		font-size: 40px;
		font-style: normal;
		font-weight: 700;
		line-height: 1.42;
		margin: -70px 0 24px;

		@media (min-width: 640px) {
			font-size: 60px;
		}
	}

	.container {
		text-align: center;
		margin-top: 7vh;
		margin-top: 7svh;
	}

	.gradient {
		background: linear-gradient(90deg, #ce4da4 0%, #7353e5 100%);
		background-clip: text;
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
	}

	.ellipse {
		position: absolute;
		width: 50%;
		height: 50%;
		max-width: 418px;
		max-height: 418px;
		flex-shrink: 0;
		border-radius: 418px;
		filter: blur(100px);

		&.ellipse-1 {
			top: 137px;
			left: 73px;
			background: rgba(206, 77, 164, 0.4);
		}

		&.ellipse-2 {
			top: 292px;
			right: 125px;
			background: rgba(115, 83, 229, 0.4);
		}
	}

	.parallax {
		--parallax-speed: 1;

		& .parallax__text {
			grid-area: stack;
			animation: parallax linear;
			animation-timeline: scroll();
		}
	}

	.parallax__text {
		--parallax-speed: -10;
	}

	@keyframes parallax {
		to {
			transform: translateY(calc(var(--parallax-speed) * 200px));
		}
	}
</style>

<script>
	const video = document.getElementById('video-hero') as HTMLVideoElement

	if (video) {
		const addAnimationToCTA = () => {
			const text = document.getElementById('hero-to-animate')

			if (!text) {
				return
			}

			text.classList.add('animate__animated', 'animate__fadeIn')
		}

		const animateTextFromVideoTime = () => {
			const timeUpdateEvent: EventListener = (event) => {
				if (video.currentTime < 11.3) {
					return
				}

				video.removeEventListener('timeupdate', timeUpdateEvent)

				addAnimationToCTA()
			}

			setTimeout(() => {
				video.play().catch(() => {
					addAnimationToCTA()
				})
			}, 3500)

			video.addEventListener('timeupdate', timeUpdateEvent)
		}

		animateTextFromVideoTime()
	}
</script>
