---
import StyledButton from './StyledButton.astro'
---

<div class="relative">
	<video
		id="video-hero"
		class="h-screen h-svh w-full object-cover"
		src={import.meta.env.BASE_URL + 'media/videos/hero.mp4'}
		muted
		autoplay
		loop
		playsinline></video>
	<div class="ellipse ellipse-1"></div>
	<div class="ellipse ellipse-2"></div>
	<div id="hero-cta-section" class="parallax absolute top-0 h-full w-full">
		<div id="hero-cta" class="parallax__text cta-container sticky z-0 h-screen h-svh px-8">
			<div id="hero-to-animate" class="opacity-0">
				<h1>
					Cartography and Mapping<br />
					<span class="gradient"> of the Web3 Ecosystem</span>
				</h1>
				<StyledButton
					data-open-modal-iframe="https://blocksurvey.io/quo-vadis-web3-portugal-v-final-Mc2lu5KzSRmqqk39BaNUMw?v=o"
				>
					Take our Web3 Survey
				</StyledButton>
			</div>
		</div>
	</div>
	<div id="hero-empty-section" class="parallax h-screen h-svh"></div>
</div>

<style>
	h1 {
		color: white;
		font-size: 2.5rem;
		font-style: normal;
		font-weight: 700;
		line-height: 1.42;
		margin-bottom: 24px;

		@media (min-width: 640px) {
			font-size: 3.75rem;
		}
	}

	.cta-container {
		text-align: center;
		/* transition: all 1s linear; */
		margin-top: 100vh;
		margin-top: 100svh;
		display: flex;
		align-items: center;
		justify-content: center;

		&.sticky {
			position: sticky;
			top: 0;
			/* bottom: 50%; */
			/* transform: translate3d(0, -50%, 0); */
			margin-top: 0;
		}
	}

	.gradient {
		background: linear-gradient(90deg, #ce4da4 0%, #7353e5 100%);
		background-clip: text;
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
	}

	.ellipse {
		position: absolute;
		width: 50%;
		height: 50%;
		max-width: 418px;
		max-height: 418px;
		flex-shrink: 0;
		border-radius: 418px;
		filter: blur(100px);
		pointer-events: none;

		&.ellipse-1 {
			top: 137px;
			left: 73px;
			background: rgba(206, 77, 164, 0.4);
		}

		&.ellipse-2 {
			top: 292px;
			right: 125px;
			background: rgba(115, 83, 229, 0.4);
		}
	}

	.parallax {
		--parallax-speed: 1;

		& .parallax__text {
			grid-area: stack;
			animation: parallax linear;
			animation-timeline: scroll();
			animation-range-start: cover 100svh;
		}
	}

	.parallax__text {
		--parallax-speed: 5;
	}

	@keyframes parallax {
		to {
			transform: translateY(calc(var(--parallax-speed) * 200px));
		}
	}
</style>

<script>
	const video = document.getElementById('video-hero')! as HTMLVideoElement
	const emptySection = document.getElementById('hero-empty-section')!
	const ctaSection = document.getElementById('hero-cta-section')!
	const text = document.getElementById('hero-to-animate')!
	const cta = document.getElementById('hero-cta')!

	const fadeInCta = () => {
		text.classList.add('animate__animated', 'animate__fadeIn')
	}

	const unstickCta = () => {
		cta.classList.remove('sticky')
	}

	let timeoutAfterFadeIn: number | undefined
	let timeoutCheckVideoIsPlayable: number | undefined
	const unsubscribeVideoEvents = () => {
		clearTimeout(timeoutAfterFadeIn)
		clearTimeout(timeoutCheckVideoIsPlayable)
		video.removeEventListener('timeupdate', timeUpdateEvent)
	}

	const unsubscribeAll = () => {
		unsubscribeVideoEvents()
		observerScrollToEnd.disconnect()
		observerPassedSection.disconnect()
		observerInCtaSection.disconnect()
	}

	const intersectionScrollEndCallback: IntersectionObserverCallback = (intersectingEntries) => {
		if (intersectingEntries[0].intersectionRatio < 1) {
			return
		}

		unsubscribeAll()
		fadeInCta()
		unstickCta()
	}
	const observerScrollToEnd = new IntersectionObserver(intersectionScrollEndCallback, {
		rootMargin: '0px',
		threshold: 1,
	})
	observerScrollToEnd.observe(emptySection)

	let passedSectionIsIntersecting: boolean | undefined
	const intersectionPassedSectionCallback: IntersectionObserverCallback = (
		intersectingEntries,
	) => {
		if (passedSectionIsIntersecting === undefined) {
			passedSectionIsIntersecting = intersectingEntries[0].isIntersecting

			if (
				!intersectingEntries[0].isIntersecting &&
				intersectingEntries[0].intersectionRatio <= 0.15
			) {
				unsubscribeVideoEvents()
			}

			return
		}

		if (passedSectionIsIntersecting === intersectingEntries[0].isIntersecting) {
			return
		}

		unsubscribeAll()
		fadeInCta()
		unstickCta()
	}
	const observerPassedSection = new IntersectionObserver(intersectionPassedSectionCallback, {
		rootMargin: '0px',
		threshold: 0.5,
	})
	observerPassedSection.observe(ctaSection)

	const intersectionGoBackSectionCallback: IntersectionObserverCallback = (
		intersectingEntries,
	) => {
		if (!intersectingEntries[0].isIntersecting) {
			return
		}

		unsubscribeAll()
		fadeInCta()
		unstickCta()
	}
	const observerInCtaSection = new IntersectionObserver(intersectionGoBackSectionCallback, {
		rootMargin: '0px',
		threshold: 0.45,
	})
	observerInCtaSection.observe(emptySection)

	const scrollToCTASection = (waitVideoTimeToScroll: boolean) => {
		fadeInCta()

		const doScroll = () => {
			observerInCtaSection.disconnect()
			emptySection.scrollIntoView({ behavior: 'smooth' })
		}

		if (waitVideoTimeToScroll) {
			timeoutAfterFadeIn = setTimeout(doScroll, 450)
		} else {
			doScroll()
		}
	}

	const timeUpdateEvent: EventListener = (event) => {
		if (video.currentTime < 11.3) {
			return
		}

		video.removeEventListener('timeupdate', timeUpdateEvent)

		scrollToCTASection(true)
	}

	timeoutCheckVideoIsPlayable = setTimeout(() => {
		video.play().catch(() => {
			scrollToCTASection(false)

			video.removeEventListener('timeupdate', timeUpdateEvent)
		})
	}, 3500)

	video.addEventListener('timeupdate', timeUpdateEvent)
</script>
