---
import counters from '../content/counters.json'
---

<div
	class="relative mx-auto flex w-full max-w-5xl flex-col gap-y-8 px-6 py-10 text-white sm:gap-y-16 sm:px-20 sm:py-24"
>
	<div class="ellipse"></div>
	<h2 class="text-center text-3xl font-bold sm:text-4xl">Explore our data</h2>
	<div class="flex flex-col gap-16 sm:flex-row">
		<div class="animate--on-visibility flex-1" data-animationclass="animate__slideInUp">
			<div class="scale">
				<div class="rectangle"></div>
				<div class="card btn--open-modal-blockSurvey flex-1">
					<dotlottie-player
						autoplay
						loop
						mode="normal"
						src={import.meta.env.BASE_URL + 'media/lottie-files/blocksurvey.json'}
					>
					</dotlottie-player>
					<div class="text-content">
						<p class="counter" data-target={counters?.web3SurveyRespondents}>0</p>
						<p>Web3 Survey Respondents</p>
					</div>
				</div>
			</div>
		</div>

		<div class="animate--on-visibility flex-1" data-animationclass="animate__slideInUp">
			<div class="scale">
				<div class="rectangle"></div>
				<div class="card btn--open-modal-kumu flex-1">
					<dotlottie-player
						autoplay
						loop
						mode="normal"
						src={import.meta.env.BASE_URL + 'media/lottie-files/kumu.json'}
					>
					</dotlottie-player>
					<div class="text-content">
						<p class="counter" data-target={counters?.web3EcosystemNumbers}>0</p>
						<p>Web3 Ecosystem Numbers</p>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<style>
	.ellipse {
		position: absolute;
		width: 30%;
		height: 30%;
		max-width: 418px;
		max-height: 418px;
		flex-shrink: 0;
		border-radius: 418px;
		filter: blur(100px);
		right: 0;
		background: rgba(206, 77, 164, 0.4);
	}

	.card {
		display: flex;
		flex-direction: column;
		align-items: center;
		cursor: pointer;
		padding: 24px 64px;
		border-radius: 25px;
		border: 3px solid transparent;
		background:
			linear-gradient(var(--main-bg-color), var(--main-bg-color)) padding-box,
			linear-gradient(to right, #7353e5, #ce4da4, #ce4da4) border-box;

		.text-content {
			text-align: center;
			font-family: Poppins-Bold;
			line-height: normal;

			.counter {
				font-size: 48px;
			}

			& p:not(.counter) {
				font-size: 18px;
				text-transform: uppercase;
				background: linear-gradient(90deg, #ce4da4 0%, #7353e5 100%);
				background-clip: text;
				-webkit-background-clip: text;
				-webkit-text-fill-color: transparent;
			}
		}
	}

	.scale {
		display: flex;
		height: 100%;
		transition: all 0.3s ease-in-out;
		transform-style: preserve-3d;

		.rectangle {
			position: absolute;
			height: 100%;
			width: 100%;
			z-index: -1;
			border-radius: 20px;
			background: linear-gradient(90deg, #8a79ff 0%, #ce4da4 100%);
			filter: blur(30px);
			opacity: 0;
			transition: opacity 0.3s ease-in-out;
		}

		&:hover {
			transform: scale(1.1);

			.rectangle {
				opacity: 1;
			}
		}
	}
</style>

<script>
	const counters = document.querySelectorAll('.counter')
	const speed = 500 // The lower the slower

	counters.forEach((counter) => {
		const updateCount = () => {
			const target = +counter.getAttribute('data-target')
			const count = +counter.innerText

			// Lower inc to slow and higher to slow
			const inc = Math.floor(target / speed)

			// Check if target is reached
			if (count < target) {
				// Add inc to count and output in counter
				counter.innerText = count + inc
				// Call function every ms
				setTimeout(updateCount, 1)
			} else {
				counter.innerText = target
			}
		}

		updateCount()
	})
</script>
