---
import board from '../content/board.json'
---

<div class="relative overflow-x-hidden py-44">
	<div class="ellipse"></div>
	<div class="ellipse ellipse-2"></div>
	<div class="ellipse ellipse-3"></div>

	<div class="mx-auto grid max-w-6xl px-6 lg:px-20">
		<h2
			class="animate--on-visibility mb-9 text-3xl font-bold tracking-tight text-white sm:text-4xl"
			data-animationclass="animate__slideInRight"
		>
			Editorial Board
		</h2>
		<ul role="list" class="flex flex-wrap justify-center gap-4">
			{
				board.map((person) => (
					<li class={`board-item text-white${person.linkedin ? ' link-scale' : ''}`}>
						<a href={person.linkedin} target="_blank">
							<div
								class="animate--on-visibility h-full"
								data-animationclass="animate__zoomIn"
							>
								<div class="backdrop" />
								<div class="card flex h-full flex-col items-center justify-center py-4 text-center">
									<img class="avatar-img mb-4 h-20 object-contain" src="" />
									<h3 class="text-base tracking-tight">{person.name}</h3>
									<p class="text-xs opacity-50">{person.company}</p>
								</div>
							</div>
						</a>
					</li>
				))
			}
		</ul>
	</div>
</div>

<style>
	.ellipse {
		position: absolute;
		width: 50%;
		height: 50%;
		width: 410px;
		height: 428px;
		flex-shrink: 0;
		border-radius: 428px;
		background: rgba(206, 77, 164, 0.4);
		filter: blur(100px);
		left: 99px;
		top: 80px;
		z-index: -1;

		&.ellipse-2 {
			top: 200px;
			left: auto;
			right: 99px;
			background: rgba(115, 83, 229, 0.3);
		}

		&.ellipse-3 {
			top: 1000px;
			left: auto;
			right: 125px;
			background: rgba(115, 83, 229, 0.4);
		}
	}

	h3 {
		font-family: inherit;
	}

	.backdrop {
		position: absolute;
		top: 0;
		bottom: 0;
		left: 0;
		right: 0;
		opacity: 0.9;
		background: linear-gradient(
			90deg,
			rgba(138, 121, 255, 0.8) 0%,
			rgba(206, 77, 164, 0.8) 100%
		);
		filter: blur(30px);
		z-index: -1;
	}

	.board-item {
		--gap: 16px;
		--n: 2;
		width: calc((100% / var(--n)) - (((var(--n) - 1) / var(--n)) * var(--gap)));

		@media (min-width: 640px) {
			--n: 3;
		}

		@media (min-width: 1024px) {
			--n: 4;
		}
	}

	.link-scale {
		transition: all 0.3s ease-in-out;
		transform-style: preserve-3d;

		&:hover {
			transform: scale(0.9);
		}
	}

	.card {
		border-radius: 20px;
		background: #1d1a27;

		@media (min-width: 640px) {
			aspect-ratio: 1 / 1;
		}
	}
</style>

<script>
	const images = document.querySelectorAll('.avatar-img')
	const numberOfImgs = 51
	const boardLength = images.length
	const numbers = Array.from({ length: numberOfImgs }, (_, index) => index + 1)

	const shuffleArray = () => {
		for (let i = numberOfImgs - 1; i > 0; i--) {
			const j = Math.floor(Math.random() * (i + 1))
			;[numbers[i], numbers[j]] = [numbers[j], numbers[i]]
		}

		if (boardLength > numberOfImgs) {
			const extraArray = []

			for (let i = 0; i < boardLength - numberOfImgs; i++) {
				const randomIdx = Math.floor(Math.random() * boardLength + 1)
				extraArray[i] = randomIdx
			}

			numbers.push(...extraArray)
		}
	}

	shuffleArray()

	for (let i = 0; i < images.length; i++) {
		images[i].src = `${import.meta.env.BASE_URL}avatars/${numbers[i]}.svg`
	}
</script>
