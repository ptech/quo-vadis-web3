---
import 'animate.css'

interface Props {
	title: string
}

const { title } = Astro.props
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<link rel="icon" type="image/png" href=`${import.meta.env.BASE_URL}favicon.png` />

		<title>{title}</title>

		<script type="text/javascript" src="https://blocksurvey.io/assets/js/blocksurvey-widget.js"
		></script>
		<script
			type="module"
			src="https://unpkg.com/@dotlottie/player-component@2.3.0/dist/dotlottie-player.mjs"
		></script>
	</head>
	<body>
		<slot />
	</body>
</html>

<style is:global>
	@font-face {
		font-family: 'Poppins-Bold';
		src: url('/fonts/Poppins-Bold.ttf') format('truetype');
		font-weight: normal;
		font-style: normal;
		font-display: swap;
	}
	@font-face {
		font-family: 'OpenSans-Regular';
		src: url('/fonts/OpenSans-Regular.ttf') format('truetype');
		font-weight: normal;
		font-style: normal;
		font-display: swap;
	}
	:root {
		--nav-height: 89px;
		--footer-height: 220px;
		--main-bg-color: #13111a;
	}
	html {
		font-family: 'OpenSans-Regular', sans-serif;
		background-color: var(--main-bg-color);
	}
	main {
		display: flex;
		flex-direction: column;
		width: 100vw;
	}
	h1,
	h2,
	h3 {
		font-family: 'Poppins-Bold', sans-serif;
	}
	.animate--on-visibility {
		transition: visibility 0.3s ease-in-out;
		visibility: hidden;
	}
	.animate__animated {
		--animate-duration: 2s;
		visibility: visible;
	}

	.scroll-reveal span {
		color: hsl(0 0% 100% / 0.3);
		background-clip: text;
		background-repeat: no-repeat;
		background-size: 0% 100%;
		background-image: linear-gradient(90deg, white, white);
		animation: scroll-reveal linear forwards;
		animation-timeline: view(y);
	}

	@keyframes scroll-reveal {
		to {
			background-size: 100% 100%;
		}
	}

	.noscroll {
		overflow: hidden;
	}
</style>

<script>
	const animatingClassName = 'animate__animated'

	const observerOptions = {
		root: null,
		/** @type {String} */
		rootMargin: '0px',
		/** @type {Number} */
		threshold: 0.2,
	}

	function intersectionCallback(intersectingEntries) {
		for (let j = 0; j < intersectingEntries.length; j++) {
			if (
				intersectingEntries[j].isIntersecting &&
				intersectingEntries[j].intersectionRatio > observerOptions.threshold
			) {
				if (intersectingEntries[j].target && intersectingEntries[j].target.classList) {
					var animationClassName = intersectingEntries[j].target.dataset.animationclass
					intersectingEntries[j].target.classList.add(
						animatingClassName,
						animationClassName,
					)
				}
			}
		}
	}

	document.addEventListener('DOMContentLoaded', function () {
		const observer = new IntersectionObserver(intersectionCallback, observerOptions)
		const elementsAnimatedOnVisibility =
			document.getElementsByClassName('animate--on-visibility')
		for (let i = 0; i < elementsAnimatedOnVisibility.length; i++) {
			observer.observe(elementsAnimatedOnVisibility[i])
		}
	})
</script>
